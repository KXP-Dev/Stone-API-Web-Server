from flask import Blueprint, request, jsonify
from init import db
from models.customers import Customer, CustomerSchema

customer_bp = Blueprint('customer', __name__, url_prefix='/customers')
customer_schema = CustomerSchema()
customers_schema = CustomerSchema(many=True)

# Endpoint to create a new customer
@customer_bp.route('/create', methods=['POST'])
def create_customer():
    data = request.get_json()
    customer_name = data.get('customer_name')
    email = data.get('email')
    address = data.get('address')

    if not customer_name or not email or not address:
        return jsonify({'message': 'Missing required fields'}), 400

    new_customer = Customer(customer_name=customer_name, email=email, address=address)
    db.session.add(new_customer)
    db.session.commit()

    serialized_customer = customer_schema.dump(new_customer)
    return jsonify({'message': 'Customer created successfully', 'customer': serialized_customer}), 201

# Endpoint to get all customers
@customer_bp.route('/all', methods=['GET'])
def get_all_customers():
    all_customers = Customer.query.all()
    result = customers_schema.dump(all_customers)
    return jsonify(result), 200

# Endpoint to update a customer
@customer_bp.route('/update', methods=['PUT'])
def update_customer():
    data = request.get_json()
    customer_id = data.get('customer_id')
    customer = Customer.query.get(customer_id)

    if not customer:
        return jsonify({'message': 'Customer not found'}), 404

    customer.customer_name = data.get('customer_name', customer.customer_name)
    customer.email = data.get('email', customer.email)
    customer.address = data.get('address', customer.address)
    db.session.commit()

    serialized_customer = customer_schema.dump(customer)
    return jsonify({'message': 'Customer updated successfully', 'customer': serialized_customer}), 200

# Endpoint to delete a customer
@customer_bp.route('/delete', methods=['DELETE'])
def delete_customer():
    data = request.get_json()
    customer_id = data.get('customer_id')
    customer = Customer.query.get(customer_id)

    if not customer:
        return jsonify({'message': 'Customer not found'}), 404

    db.session.delete(customer)
    db.session.commit()

    return jsonify({'message': 'Customer deleted successfully'}), 200